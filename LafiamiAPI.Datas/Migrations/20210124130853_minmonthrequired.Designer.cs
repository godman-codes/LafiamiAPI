// <auto-generated />
using System;
using LafiamiAPI.Datas;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LafiamiAPI.Datas.Migrations
{
    [DbContext(typeof(LafiamiContext))]
    [Migration("20210124130853_minmonthrequired")]
    partial class minmonthrequired
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("LafiamiAPI.Datas.Models.ApplicationRoleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.ApplicationUserRoleModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.CartModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InsurancePlanId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuatityOrder")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UnknownUserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InsurancePlanId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultVariations")
                        .HasColumnType("ntext");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconURl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseAsFilter")
                        .HasColumnType("bit");

                    b.Property<bool>("UseforVariation")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categorys");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.CityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.CountryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThreeLetterIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TwoLetterIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.EmailModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangeOrResetUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmailType")
                        .HasColumnType("int");

                    b.Property<string>("Emailaddresses")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("FailedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("ntext");

                    b.Property<string>("NewUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("Sentdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("WalletTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NewUserId")
                        .IsUnique()
                        .HasFilter("[NewUserId] IS NOT NULL");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasFilter("[PaymentId] IS NOT NULL");

                    b.HasIndex("WalletTransactionId")
                        .IsUnique()
                        .HasFilter("[WalletTransactionId] IS NOT NULL");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.EmailTemplateModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmailType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Template")
                        .HasColumnType("ntext");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.FIndAPlanQuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FIndAPlanQuestions");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.FindAPlanQuestionAnswerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FIndAPlanQuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FIndAPlanQuestionId");

                    b.ToTable("FindAPlanQuestionAnswers");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsuranceAuditCategoryModel", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("InsuranceAuditId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "InsuranceAuditId");

                    b.HasIndex("InsuranceAuditId");

                    b.ToTable("InsuranceAuditCategories");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsuranceAuditModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasResult")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResultCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("InsuranceAudits");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsuranceAuditQuestionAnswerModel", b =>
                {
                    b.Property<int>("FindAPlanQuestionAnswerId")
                        .HasColumnType("int");

                    b.Property<Guid>("InsuranceAuditId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FindAPlanQuestionAnswerId", "InsuranceAuditId");

                    b.HasIndex("InsuranceAuditId");

                    b.ToTable("InsuranceAuditQuestionAnswers");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsuranceCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<long>("InsurancePlanId")
                        .HasColumnType("bigint");

                    b.Property<string>("CoveredNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCovered")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId", "InsurancePlanId");

                    b.HasIndex("InsurancePlanId");

                    b.ToTable("InsuranceCategories");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsurancePlanAnswerAsTagModel", b =>
                {
                    b.Property<int>("FindAPlanQuestionAnswerId")
                        .HasColumnType("int");

                    b.Property<long>("InsurancePlanId")
                        .HasColumnType("bigint");

                    b.HasKey("FindAPlanQuestionAnswerId", "InsurancePlanId");

                    b.HasIndex("InsurancePlanId");

                    b.ToTable("InsurancePlanAnswerAsTags");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsurancePlanModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<long?>("InsurancePlanModelId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MinMonthsRequired")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicturesJson")
                        .HasColumnType("ntext");

                    b.Property<int>("PublishStatus")
                        .HasColumnType("int");

                    b.Property<string>("SEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("SortingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViewCounter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsurancePlanModelId");

                    b.HasIndex("UserId");

                    b.ToTable("InsurancePlans");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsurancePriceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BulkAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BulkCount")
                        .HasColumnType("int");

                    b.Property<decimal>("CartBulkAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CartBulkCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("EnableBulkAmount")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableCartBulkAmount")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableDiscount")
                        .HasColumnType("bit");

                    b.Property<long>("InsurancePlanId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsurancePlanId");

                    b.ToTable("InsurancePrices");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsuranceRejectionMessageModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InsurancePlanId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsurancePlanId");

                    b.ToTable("InsuranceRejectionMessageModel");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.ManageCacheModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCleared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ManageCaches");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.OrderModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityModelId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForCanceling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForRejecting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateModelId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CityModelId");

                    b.HasIndex("CountryModelId");

                    b.HasIndex("StateModelId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.OrderNoteModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Closedorder")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderNotes");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.PaymentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GatewayTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaymentCompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentGateway")
                        .HasColumnType("int");

                    b.Property<string>("PaymentInitizationJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.RatingModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("InsurancePlanId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RatingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StarRating")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("TotalRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserViewModelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InsurancePlanId");

                    b.HasIndex("RatingTypeId");

                    b.HasIndex("TotalRatingId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserViewModelId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.RatingTypeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RatingFrequency")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RatingTypes");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.StateModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.TotalRatingModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("InsurancePlanId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RatingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("TotalStarRating")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserViewModelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InsurancePlanId");

                    b.HasIndex("RatingTypeId");

                    b.HasIndex("UserViewModelId");

                    b.ToTable("TotalRatings");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.UserViewModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPasswordChanged")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sex")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedDate")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StateId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.WalletModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BookBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.WalletTransactionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("TransactionCompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.ApplicationUserRoleModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.ApplicationRoleModel", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.CartModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.InsurancePlanModel", "InsurancePlan")
                        .WithMany("Carts")
                        .HasForeignKey("InsurancePlanId");

                    b.HasOne("LafiamiAPI.Datas.Models.OrderModel", "Order")
                        .WithMany("Carts")
                        .HasForeignKey("OrderId");

                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");

                    b.Navigation("InsurancePlan");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.CityModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.StateModel", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.EmailModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", "NewUser")
                        .WithOne("EmailModel")
                        .HasForeignKey("LafiamiAPI.Datas.Models.EmailModel", "NewUserId");

                    b.HasOne("LafiamiAPI.Datas.Models.OrderModel", "Order")
                        .WithOne("Email")
                        .HasForeignKey("LafiamiAPI.Datas.Models.EmailModel", "OrderId");

                    b.HasOne("LafiamiAPI.Datas.Models.PaymentModel", "Payment")
                        .WithOne("Email")
                        .HasForeignKey("LafiamiAPI.Datas.Models.EmailModel", "PaymentId");

                    b.HasOne("LafiamiAPI.Datas.Models.WalletTransactionModel", "WalletTransaction")
                        .WithOne("Email")
                        .HasForeignKey("LafiamiAPI.Datas.Models.EmailModel", "WalletTransactionId");

                    b.Navigation("NewUser");

                    b.Navigation("Order");

                    b.Navigation("Payment");

                    b.Navigation("WalletTransaction");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.FindAPlanQuestionAnswerModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.FIndAPlanQuestionModel", "FIndAPlanQuestion")
                        .WithMany("FindAPlanQuestionAnswers")
                        .HasForeignKey("FIndAPlanQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FIndAPlanQuestion");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsuranceAuditCategoryModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.CategoryModel", "Category")
                        .WithMany("InsuranceAuditCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LafiamiAPI.Datas.Models.InsuranceAuditModel", "InsuranceAudit")
                        .WithMany("InsuranceAuditCategories")
                        .HasForeignKey("InsuranceAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("InsuranceAudit");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsuranceAuditModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", "User")
                        .WithMany("InsuranceAudits")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsuranceAuditQuestionAnswerModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.FindAPlanQuestionAnswerModel", "FindAPlanQuestionAnswer")
                        .WithMany("InsuranceAuditQuestionAnswers")
                        .HasForeignKey("FindAPlanQuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LafiamiAPI.Datas.Models.InsuranceAuditModel", "InsuranceAudit")
                        .WithMany("InsuranceAuditQuestionAnswers")
                        .HasForeignKey("InsuranceAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FindAPlanQuestionAnswer");

                    b.Navigation("InsuranceAudit");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsuranceCategory", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.CategoryModel", "Category")
                        .WithMany("InsuranceCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LafiamiAPI.Datas.Models.InsurancePlanModel", "InsurancePlan")
                        .WithMany("InsuranceCategories")
                        .HasForeignKey("InsurancePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("InsurancePlan");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsurancePlanAnswerAsTagModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.FindAPlanQuestionAnswerModel", "FindAPlanQuestionAnswer")
                        .WithMany("InsurancePlanAnswerAsTags")
                        .HasForeignKey("FindAPlanQuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LafiamiAPI.Datas.Models.InsurancePlanModel", "InsurancePlan")
                        .WithMany("InsurancePlanAnswerAsTags")
                        .HasForeignKey("InsurancePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FindAPlanQuestionAnswer");

                    b.Navigation("InsurancePlan");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsurancePlanModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.InsurancePlanModel", null)
                        .WithMany("InsurancePlans")
                        .HasForeignKey("InsurancePlanModelId");

                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", "User")
                        .WithMany("InsurancePlans")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsurancePriceModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.InsurancePlanModel", "InsurancePlan")
                        .WithMany("InsurancePrices")
                        .HasForeignKey("InsurancePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsurancePlan");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsuranceRejectionMessageModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.InsurancePlanModel", "InsurancePlan")
                        .WithMany("RejectionMessages")
                        .HasForeignKey("InsurancePlanId");

                    b.Navigation("InsurancePlan");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.OrderModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.CityModel", null)
                        .WithMany("Order")
                        .HasForeignKey("CityModelId");

                    b.HasOne("LafiamiAPI.Datas.Models.CountryModel", null)
                        .WithMany("Orders")
                        .HasForeignKey("CountryModelId");

                    b.HasOne("LafiamiAPI.Datas.Models.StateModel", null)
                        .WithMany("Orders")
                        .HasForeignKey("StateModelId");

                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.OrderNoteModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.OrderModel", "Order")
                        .WithMany("OrderNotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.PaymentModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.OrderModel", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.RatingModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.InsurancePlanModel", "InsurancePlan")
                        .WithMany("Ratings")
                        .HasForeignKey("InsurancePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LafiamiAPI.Datas.Models.RatingTypeModel", "RatingType")
                        .WithMany("Ratings")
                        .HasForeignKey("RatingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LafiamiAPI.Datas.Models.TotalRatingModel", "TotalRating")
                        .WithMany("Ratings")
                        .HasForeignKey("TotalRatingId");

                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId");

                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", null)
                        .WithMany("RatedUserRatings")
                        .HasForeignKey("UserViewModelId");

                    b.Navigation("InsurancePlan");

                    b.Navigation("RatingType");

                    b.Navigation("TotalRating");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.StateModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.CountryModel", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.TotalRatingModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.InsurancePlanModel", "InsurancePlan")
                        .WithMany("TotalRatings")
                        .HasForeignKey("InsurancePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LafiamiAPI.Datas.Models.RatingTypeModel", "RatingType")
                        .WithMany("TotalRatings")
                        .HasForeignKey("RatingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", null)
                        .WithMany("TotalRatings")
                        .HasForeignKey("UserViewModelId");

                    b.Navigation("InsurancePlan");

                    b.Navigation("RatingType");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.UserViewModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.CityModel", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId");

                    b.HasOne("LafiamiAPI.Datas.Models.CountryModel", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId");

                    b.HasOne("LafiamiAPI.Datas.Models.StateModel", "State")
                        .WithMany("Users")
                        .HasForeignKey("StateId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.WalletModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("LafiamiAPI.Datas.Models.WalletModel", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.WalletTransactionModel", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.OrderModel", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("LafiamiAPI.Datas.Models.WalletModel", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.ApplicationRoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LafiamiAPI.Datas.Models.UserViewModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.ApplicationRoleModel", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.CategoryModel", b =>
                {
                    b.Navigation("InsuranceAuditCategories");

                    b.Navigation("InsuranceCategories");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.CityModel", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.CountryModel", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("States");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.FIndAPlanQuestionModel", b =>
                {
                    b.Navigation("FindAPlanQuestionAnswers");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.FindAPlanQuestionAnswerModel", b =>
                {
                    b.Navigation("InsuranceAuditQuestionAnswers");

                    b.Navigation("InsurancePlanAnswerAsTags");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsuranceAuditModel", b =>
                {
                    b.Navigation("InsuranceAuditCategories");

                    b.Navigation("InsuranceAuditQuestionAnswers");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.InsurancePlanModel", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("InsuranceCategories");

                    b.Navigation("InsurancePlanAnswerAsTags");

                    b.Navigation("InsurancePlans");

                    b.Navigation("InsurancePrices");

                    b.Navigation("Ratings");

                    b.Navigation("RejectionMessages");

                    b.Navigation("TotalRatings");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.OrderModel", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Email");

                    b.Navigation("OrderNotes");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.PaymentModel", b =>
                {
                    b.Navigation("Email");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.RatingTypeModel", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("TotalRatings");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.StateModel", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Orders");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.TotalRatingModel", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.UserViewModel", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("EmailModel");

                    b.Navigation("InsuranceAudits");

                    b.Navigation("InsurancePlans");

                    b.Navigation("Orders");

                    b.Navigation("RatedUserRatings");

                    b.Navigation("Ratings");

                    b.Navigation("TotalRatings");

                    b.Navigation("UserRoles");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.WalletModel", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("LafiamiAPI.Datas.Models.WalletTransactionModel", b =>
                {
                    b.Navigation("Email");
                });
#pragma warning restore 612, 618
        }
    }
}
